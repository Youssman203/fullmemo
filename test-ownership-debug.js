// Test sp√©cifique pour diagnostic ownership des collections import√©es
console.log('üîç DIAGNOSTIC OWNERSHIP - Collections Import√©es');
console.log('='.repeat(55));

console.log('\nüìã PROBL√àME RAPPORT√â:');
console.log('  "Collection import√©e par √©tudiant appara√Æt chez enseignant"');

console.log('\nüéØ POINTS DE V√âRIFICATION:');
console.log('1. Nouvelle collection cr√©√©e avec user: userId (√©tudiant)');
console.log('2. Route /api/collections retourne les bonnes collections pour chaque utilisateur');
console.log('3. Frontend rafra√Æchit correctement apr√®s import');
console.log('4. Cache frontend ne m√©lange pas les utilisateurs');

console.log('\nüîß BACKEND - Points √† v√©rifier:');
console.log('- Ligne 235 de importCollectionByCode: user: userId');
console.log('- req.user._id doit √™tre l\'ID de l\'√©tudiant');
console.log('- Collection.save() doit utiliser le bon owner');

console.log('\nüé® FRONTEND - Points √† v√©rifier:');
console.log('- DataContext.getUserCollections() utilise le bon token');
console.log('- handleCollectionAccessed() rafra√Æchit bien');
console.log('- Cache de collections pas partag√© entre sessions');

console.log('\n‚ö†Ô∏è  HYPOTH√àSES POSSIBLES:');

console.log('\n1. üîë PROBL√àME DE TOKEN:');
console.log('   - Enseignant et √©tudiant partagent le m√™me token');
console.log('   - Token JWT contient mauvais user._id');
console.log('   - localStorage contient token d\'un autre utilisateur');

console.log('\n2. üóÑÔ∏è  PROBL√àME DE SESSION:');
console.log('   - Utilisateur connect√© comme enseignant au lieu d\'√©tudiant');
console.log('   - Session utilisateur pas mise √† jour apr√®s changement');
console.log('   - AuthContext retourne mauvais utilisateur');

console.log('\n3. üîÑ PROBL√àME DE CACHE:');
console.log('   - DataContext garde les collections en m√©moire');
console.log('   - Pas de clear du cache entre utilisateurs');
console.log('   - Collections m√©lang√©es entre sessions');

console.log('\n4. üåê PROBL√àME DE RAFRA√éCHISSEMENT:');
console.log('   - getUserCollections() pas appel√© c√¥t√© bon utilisateur');
console.log('   - Callback handleCollectionAccessed pas d√©clench√©');
console.log('   - Interface pas mise √† jour apr√®s import');

console.log('\nüìù TESTS √Ä EFFECTUER:');

console.log('\nüîç A. V√©rifier Token et Session:');
console.log('   1. Console navigateur: localStorage.getItem("token")');
console.log('   2. D√©codage JWT pour voir user._id');
console.log('   3. V√©rifier AuthContext.user');
console.log('   4. Confirmer qui est connect√© r√©ellement');

console.log('\nüîç B. Tester API Backend Direct:');
console.log('   1. Import via Postman/curl avec token √©tudiant');
console.log('   2. V√©rifier owner de la nouvelle collection');
console.log('   3. Appeler /api/collections avec token √©tudiant');
console.log('   4. Appeler /api/collections avec token enseignant');

console.log('\nüîç C. Tracer Frontend:');
console.log('   1. Logs dans importCollectionByCode()');
console.log('   2. Logs dans handleCollectionAccessed()');
console.log('   3. Logs dans getUserCollections()');
console.log('   4. V√©rifier qui appelle le rafra√Æchissement');

console.log('\nüí° SOLUTIONS POTENTIELLES:');

console.log('\n‚úÖ Si probl√®me de token:');
console.log('   - Forcer d√©connexion/reconnexion');
console.log('   - Clear localStorage');
console.log('   - V√©rifier cr√©ation token JWT');

console.log('\n‚úÖ Si probl√®me de session:');
console.log('   - V√©rifier AuthContext.user');
console.log('   - Forcer mise √† jour session');
console.log('   - S√©parer sessions navigateur');

console.log('\n‚úÖ Si probl√®me de cache:');
console.log('   - Clear cache DataContext √† la d√©connexion');
console.log('   - Forcer re-fetch apr√®s import');
console.log('   - Isoler cache par utilisateur');

console.log('\n‚úÖ Si probl√®me de rafra√Æchissement:');
console.log('   - Appeler refreshData() au lieu de getUserCollections()');
console.log('   - Forcer re-render du composant');
console.log('   - V√©rifier callback onCollectionAccessed');

console.log('\nüéØ SCRIPT DE TEST MANUEL:');
console.log('```javascript');
console.log('// Dans console navigateur c√¥t√© √©tudiant:');
console.log('// 1. V√©rifier utilisateur connect√©');
console.log('console.log("Token:", localStorage.getItem("token"));');
console.log('console.log("User:", JSON.parse(localStorage.getItem("user") || "{}"));');
console.log('');
console.log('// 2. Tester API collections directement');
console.log('fetch("/api/collections", {');
console.log('  headers: { Authorization: "Bearer " + localStorage.getItem("token") }');
console.log('}).then(r => r.json()).then(console.log);');
console.log('```');

console.log('\nüöÄ PROCHAINES √âTAPES:');
console.log('1. Ex√©cuter script manuel c√¥t√© √©tudiant');
console.log('2. Comparer avec c√¥t√© enseignant');
console.log('3. Identifier la diff√©rence');
console.log('4. Appliquer le correctif appropri√©');

console.log('\n' + '='.repeat(55));
console.log('‚úÖ Diagnostic termin√© - Tests manuels requis');
