// Script √† ex√©cuter dans la console du navigateur pour tester le rafra√Æchissement
// 1. Aller sur http://localhost:3000 
// 2. Se connecter comme √©tudiant (etudiant.test@example.com / password123)
// 3. Aller sur la page Collections
// 4. Ouvrir F12 > Console
// 5. Coller ce script

function testFrontendRefresh() {
  console.log('üß™ Test rafra√Æchissement frontend apr√®s import\n');
  
  // Test 1: V√©rifier √©tat initial
  console.log('1. √âtat initial des collections:');
  if (window.collections && window.collections.length) {
    console.log(`üìö ${window.collections.length} collections actuelles`);
    window.collections.forEach((col, i) => {
      console.log(`   ${i+1}. ${col.name} (${col._id})`);
    });
  } else {
    console.log('‚ùì Variable collections non accessible dans window');
  }
  
  // Test 2: V√©rifier les fonctions DataContext
  console.log('\n2. V√©rification DataContext:');
  if (window.getUserCollections) {
    console.log('‚úÖ getUserCollections disponible');
  } else {
    console.log('‚ùå getUserCollections non disponible');
  }
  
  // Test 3: Simulation d'import
  console.log('\n3. Test simulation import...');
  const testCode = 'TLC37O'; // Code g√©n√©r√© dans le test pr√©c√©dent
  
  if (window.fetch) {
    const token = localStorage.getItem('token');
    if (token) {
      console.log('üîê Token trouv√©, test import...');
      
      fetch(`http://localhost:5000/api/share/code/${testCode}/import`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        console.log('üìä Status import:', response.status);
        return response.json();
      })
      .then(data => {
        if (data.success) {
          console.log('‚úÖ Import r√©ussi:', data.data.collection.name);
          
          // Test 4: Rafra√Æchir les collections
          console.log('\n4. Test rafra√Æchissement manuel...');
          if (window.getUserCollections) {
            window.getUserCollections()
              .then(() => {
                console.log('‚úÖ Rafra√Æchissement manuel r√©ussi');
                console.log('üí° V√©rifiez si la collection appara√Æt maintenant dans l\'interface');
              })
              .catch(err => {
                console.log('‚ùå Erreur rafra√Æchissement:', err.message);
              });
          }
        } else {
          console.log('‚ùå Erreur import:', data.message);
        }
      })
      .catch(err => {
        if (err.message.includes('400')) {
          console.log('‚ö†Ô∏è Collection d√©j√† import√©e (normal si test r√©p√©t√©)');
        } else {
          console.log('‚ùå Erreur requ√™te:', err.message);
        }
      });
    } else {
      console.log('‚ùå Pas de token - connectez-vous d\'abord');
    }
  }
  
  console.log('\nüí° Instructions:');
  console.log('1. Si import r√©ussi, v√©rifiez que la collection appara√Æt');
  console.log('2. Si pas visible, rechargez la page (F5)');
  console.log('3. Le probl√®me √©tait que le frontend ne rafra√Æchissait pas apr√®s import');
}

// Exposer les fonctions dans window pour debugging
if (typeof window !== 'undefined') {
  // Essayer d'acc√©der aux fonctions React via les dev tools
  const reactRoot = document.querySelector('#root')._reactInternalFiber || 
                    document.querySelector('#root')._reactInternalInstance;
  
  if (reactRoot) {
    console.log('üîç Root React trouv√©, recherche du contexte...');
  }
}

// Ex√©cuter le test
testFrontendRefresh();
