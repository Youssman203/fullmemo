const fetch = require('node-fetch');

async function diagnosticPermissions() {
  console.log('üîç Diagnostic des permissions de collection\n');
  
  try {
    // Test 1: Connexion enseignant
    console.log('1. Connexion enseignant...');
    const loginResponse = await fetch('http://localhost:5000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'prof.martin@example.com',
        password: 'password123'
      })
    });
    
    if (!loginResponse.ok) {
      throw new Error(`Erreur connexion: ${loginResponse.status}`);
    }
    
    const loginData = await loginResponse.json();
    console.log('‚úÖ Enseignant connect√©');
    console.log('üìä Structure de r√©ponse:', JSON.stringify(loginData, null, 2));
    
    // V√©rifier diff√©rentes structures possibles
    const userId = loginData.data?._id || loginData.user?._id || loginData._id;
    const userEmail = loginData.data?.email || loginData.user?.email || loginData.email;
    
    console.log(`üë§ ID Utilisateur: ${userId}`);
    console.log(`üìß Email: ${userEmail}`);
    
    const token = loginData.token;
    
    // Test 2: R√©cup√©ration des collections avec d√©tails proprietaire
    console.log('\n2. R√©cup√©ration des collections...');
    const collectionsResponse = await fetch('http://localhost:5000/api/collections', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const collectionsData = await collectionsResponse.json();
    console.log(`‚úÖ ${collectionsData.data.length} collections trouv√©es\n`);
    
    // Analyser chaque collection
    collectionsData.data.forEach((collection, index) => {
      console.log(`üìö Collection ${index + 1}:`);
      console.log(`   - ID: ${collection._id}`);
      console.log(`   - Nom: ${collection.name}`);
      console.log(`   - Propri√©taire: ${collection.user}`);
      console.log(`   - Match utilisateur: ${collection.user === userId ? '‚úÖ OUI' : '‚ùå NON'}`);
      console.log('');
    });
    
    // Test 3: Essayer de g√©n√©rer un code pour la premi√®re collection
    if (collectionsData.data.length > 0) {
      const testCollection = collectionsData.data[0];
      console.log(`3. Test g√©n√©ration code pour: ${testCollection.name}`);
      console.log(`   Collection ID: ${testCollection._id}`);
      console.log(`   Utilisateur connect√©: ${userId}`);
      console.log(`   Propri√©taire collection: ${testCollection.user}`);
      console.log(`   Match: ${testCollection.user === userId ? 'OUI' : 'NON'}`);
      
      const generateResponse = await fetch(`http://localhost:5000/api/share/collections/${testCollection._id}/generate`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          expiresInHours: 24,
          permissions: ['view', 'copy']
        })
      });
      
      if (generateResponse.ok) {
        const shareData = await generateResponse.json();
        console.log('‚úÖ Code g√©n√©r√© avec succ√®s!');
        console.log(`üîë Code: ${shareData.data.code}`);
      } else {
        const errorText = await generateResponse.text();
        console.log('‚ùå Erreur g√©n√©ration:');
        console.log(`   Status: ${generateResponse.status}`);
        console.log(`   R√©ponse: ${errorText}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

// Ex√©cuter le diagnostic
diagnosticPermissions();
