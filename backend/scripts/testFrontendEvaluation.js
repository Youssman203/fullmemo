// Test pour v√©rifier que le frontend peut r√©cup√©rer les donn√©es d'√©valuation
const fetch = require('node-fetch');

const API_URL = 'http://localhost:5000/api';

async function testFrontendEvaluation() {
  try {
    console.log('üîç Test de l\'int√©gration Frontend-Backend pour l\'√©valuation\n');
    
    // 1. Se connecter en tant qu'enseignant
    console.log('1Ô∏è‚É£ Connexion en tant qu\'enseignant...');
    const loginResponse = await fetch(`${API_URL}/users/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'prof.martin@example.com',
        password: 'password123'
      })
    });

    const loginData = await loginResponse.json();
    const token = loginData.token;
    const user = loginData.user;
    
    console.log('‚úÖ Connect√©:', user.name);
    console.log('   Role:', user.role);
    console.log('   ID:', user._id);
    
    // 2. R√©cup√©rer les collections de l'enseignant
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des collections de l\'enseignant...');
    const collectionsResponse = await fetch(`${API_URL}/collections`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const collectionsData = await collectionsResponse.json();
    console.log('   Collections trouv√©es:', collectionsData.data ? collectionsData.data.length : 0);
    
    if (collectionsData.data && collectionsData.data.length > 0) {
      collectionsData.data.forEach(col => {
        console.log(`   - ${col.name} (ID: ${col._id})`);
      });
    }
    
    // 3. Appeler l'endpoint d'√©valuation
    console.log('\n3Ô∏è‚É£ Appel de l\'endpoint d\'√©valuation...');
    const evaluationResponse = await fetch(`${API_URL}/evaluation/students`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    const evaluationData = await evaluationResponse.json();
    
    console.log('\n‚úÖ R√©ponse de l\'API d\'√©valuation:');
    console.log('   Success:', evaluationData.success);
    console.log('   Count:', evaluationData.count);
    console.log('   Apprenants:', evaluationData.data ? evaluationData.data.length : 0);
    
    // 4. V√©rifier la structure des donn√©es pour le frontend
    if (evaluationData.data && evaluationData.data.length > 0) {
      console.log('\nüìä Structure des donn√©es pour le frontend:');
      
      const firstStudent = evaluationData.data[0];
      console.log('\n   Premier apprenant:');
      console.log('   - student (objet):', !!firstStudent.student);
      console.log('     - _id:', firstStudent.student._id);
      console.log('     - name:', firstStudent.student.name);
      console.log('     - email:', firstStudent.student.email);
      console.log('   - collections (array):', Array.isArray(firstStudent.collections));
      console.log('   - totalSessions:', firstStudent.totalSessions);
      console.log('   - averageScore:', firstStudent.averageScore);
      console.log('   - lastActivity:', firstStudent.lastActivity);
      
      // V√©rifier que la structure correspond √† ce qu'attend le frontend
      console.log('\n‚úÖ Validation de la structure:');
      const isValidStructure = 
        firstStudent.student && 
        firstStudent.student._id && 
        firstStudent.student.name &&
        Array.isArray(firstStudent.collections) &&
        typeof firstStudent.totalSessions === 'number' &&
        typeof firstStudent.averageScore === 'number';
      
      if (isValidStructure) {
        console.log('   ‚úÖ Structure valide pour le frontend');
      } else {
        console.log('   ‚ùå Structure invalide pour le frontend');
      }
      
      // Afficher les donn√©es format√©es comme le frontend les afficherait
      console.log('\nüìã Affichage simul√© dans le frontend:');
      evaluationData.data.forEach((student, index) => {
        console.log(`\n   ${index + 1}. ${student.student.name}`);
        console.log(`      Email: ${student.student.email}`);
        console.log(`      Sessions totales: ${student.totalSessions}`);
        console.log(`      Score moyen: ${student.averageScore}%`);
        console.log(`      Collections: ${student.collections.map(c => c.name).join(', ')}`);
        console.log(`      Derni√®re activit√©: ${new Date(student.lastActivity).toLocaleString('fr-FR')}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è Aucune donn√©e d\'apprenant √† afficher');
    }
    
    // 5. Tester l'endpoint des statistiques
    console.log('\n4Ô∏è‚É£ Test de l\'endpoint des statistiques...');
    const statsResponse = await fetch(`${API_URL}/evaluation/stats`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (statsResponse.ok) {
      const statsData = await statsResponse.json();
      console.log('   ‚úÖ Statistiques r√©cup√©r√©es:');
      console.log('   - Total apprenants:', statsData.data?.totalStudents);
      console.log('   - Total sessions:', statsData.data?.totalSessions);
      console.log('   - Score moyen global:', statsData.data?.averageScore);
    } else {
      console.log('   ‚ö†Ô∏è Endpoint stats non disponible ou erreur');
    }
    
    console.log('\n‚úÖ Test termin√© avec succ√®s');
    console.log('\nüìù Recommandations:');
    console.log('1. V√©rifier que le frontend est connect√© avec le m√™me token');
    console.log('2. V√©rifier les logs de la console du navigateur');
    console.log('3. S\'assurer que l\'utilisateur connect√© a le r√¥le "teacher"');
    console.log('4. V√©rifier que la page Evaluation.js utilise bien evaluationService');
    
  } catch (error) {
    console.error('\n‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Lancer le test
testFrontendEvaluation();
