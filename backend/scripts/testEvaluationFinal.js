const fetch = require('node-fetch');
const axios = require('axios');

const API_URL = 'http://localhost:5000/api';

async function loginTeacher() {
  try {
    const response = await axios.post(`${API_URL}/users/login`, {
      email: 'prof.martin@example.com',
      password: 'password123'
    });
    
    if (response.data && response.data.token) {
      console.log('‚úÖ Connexion r√©ussie');
      console.log(`   Token: ${response.data.token.substring(0, 20)}...`);
      return response.data.token;
    } else {
      console.log('‚ùå Pas de token dans la r√©ponse');
      return null;
    }
  } catch (error) {
    console.log('‚ùå √âchec de connexion:', error.response?.data?.message || error.message);
    return null;
  }
}

async function testEvaluationAPI() {
  try {
    console.log('üîç Test final de l\'API d\'√©valuation\n');
    
    // 1. Login enseignant
    console.log('1Ô∏è‚É£ Connexion enseignant...');
    const token = await loginTeacher();
    
    if (!token) {
      console.log('‚ùå Impossible de continuer sans authentification');
      return;
    }
    
    // 2. R√©cup√©rer les donn√©es d'√©valuation
    console.log('\n2Ô∏è‚É£ R√©cup√©ration des donn√©es d\'√©valuation...');
    const evalRes = await axios.get(`${API_URL}/evaluation/students`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const evalData = evalRes.data;
    
    if (!evalData.success) {
      console.error('‚ùå √âchec r√©cup√©ration donn√©es:', evalData.message);
      return;
    }
    
    console.log('‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s');
    console.log(`   Nombre d'apprenants: ${evalData.count}`);
    
    // 3. Afficher les d√©tails
    console.log('\nüìä D√©tails des apprenants:\n');
    evalData.data.forEach((item, index) => {
      console.log(`${index + 1}. ${item.student.name} (${item.student.email})`);
      console.log(`   - Sessions totales: ${item.totalSessions}`);
      console.log(`   - Score moyen: ${item.averageScore}%`);
      console.log(`   - Derni√®re activit√©: ${new Date(item.lastActivity).toLocaleString('fr-FR')}`);
      console.log(`   - Collections utilis√©es:`);
      item.collections.forEach(col => {
        console.log(`     ‚Ä¢ ${col.name} (${col.sessionsCount} sessions)`);
      });
      console.log('');
    });
    
    // 4. V√©rifier la structure pour le frontend
    console.log('üéØ Structure de donn√©es pour le frontend:');
    const transformedData = evalData.data.map(item => ({
      studentId: item.student._id,
      studentName: item.student.name,
      studentEmail: item.student.email,
      totalSessions: item.totalSessions,
      averageScore: item.averageScore,
      lastSession: item.lastActivity,
      sessionTypes: ['revision'],
      collections: item.collections
    }));
    
    console.log(JSON.stringify(transformedData[0], null, 2));
    
    console.log('\n‚úÖ Test termin√© avec succ√®s !');
    console.log('‚ÑπÔ∏è  L\'API backend fonctionne correctement.');
    console.log('‚ÑπÔ∏è  Les donn√©es sont pr√™tes pour l\'affichage dans le frontend.');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testEvaluationAPI();
