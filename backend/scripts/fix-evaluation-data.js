// Script simplifi√© pour corriger les donn√©es d'√©valuation
const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

// Import des mod√®les
const User = require('../models/userModel');
const Collection = require('../models/collectionModel');
const Session = require('../models/sessionModel');

async function fixEvaluationData() {
  try {
    // V√©rifier que MONGO_URI est d√©fini
    if (!process.env.MONGO_URI) {
      console.error('‚ùå MONGO_URI non d√©fini. V√©rifiez le fichier .env');
      process.exit(1);
    }
    
    console.log('üì° Connexion √† MongoDB...');
    
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // 1. Trouver l'enseignant principal (prof.martin)
    const teacher = await User.findOne({ email: 'prof.martin@example.com' });
    if (!teacher) {
      console.log('‚ùå Enseignant prof.martin@example.com non trouv√©');
      process.exit(1);
    }
    console.log(`üë®‚Äçüè´ Enseignant trouv√©: ${teacher.name} (${teacher._id})`);

    // 2. Trouver toutes les collections originales de l'enseignant
    const originalCollections = await Collection.find({ 
      user: teacher._id 
    });
    console.log(`\nüìö Collections originales de l'enseignant: ${originalCollections.length}`);

    // 3. Pour chaque collection originale, trouver les collections import√©es correspondantes
    let totalImported = 0;
    let totalSessionsFixed = 0;

    for (const original of originalCollections) {
      // Chercher les collections import√©es qui r√©f√©rencent cette collection source
      const imported = await Collection.find({
        tags: { $regex: `source_${original._id}` }
      });

      if (imported.length > 0) {
        console.log(`\nüì¶ Collection "${original.name}":`);
        console.log(`   - ${imported.length} copies import√©es trouv√©es`);

        for (const importedColl of imported) {
          // Mettre √† jour la collection import√©e si n√©cessaire
          let updated = false;
          
          if (!importedColl.originalTeacher) {
            importedColl.originalTeacher = teacher._id;
            updated = true;
          }
          
          if (!importedColl.sourceCollectionId) {
            importedColl.sourceCollectionId = original._id;
            updated = true;
          }

          if (updated) {
            await importedColl.save();
            console.log(`   ‚úÖ Collection import√©e mise √† jour: "${importedColl.name}"`);
            totalImported++;
          }

          // 4. Corriger les sessions pour cette collection import√©e
          // Trouver les sessions o√π le teacher est l'√©tudiant (incorrect)
          const incorrectSessions = await Session.find({
            collection: importedColl._id,
            teacher: importedColl.user  // L'√©tudiant est incorrectement marqu√© comme teacher
          });

          if (incorrectSessions.length > 0) {
            // Corriger ces sessions pour utiliser le vrai enseignant
            const result = await Session.updateMany(
              {
                collection: importedColl._id,
                teacher: importedColl.user
              },
              {
                $set: { teacher: teacher._id }
              }
            );

            console.log(`   üìä ${result.modifiedCount} sessions corrig√©es`);
            totalSessionsFixed += result.modifiedCount;
          }
        }
      }
    }

    // 5. V√©rifier s'il reste des collections import√©es sans originalTeacher
    const orphanedImported = await Collection.find({
      tags: { $in: ['import√©'] },
      originalTeacher: { $exists: false }
    });

    if (orphanedImported.length > 0) {
      console.log(`\n‚ö†Ô∏è  ${orphanedImported.length} collections import√©es n'ont pas pu √™tre li√©es √† un enseignant`);
      console.log('Ces collections n√©cessitent une intervention manuelle:');
      orphanedImported.forEach(coll => {
        console.log(`   - "${coll.name}" (propri√©taire: ${coll.user})`);
      });
    }

    // 6. Statistiques finales
    console.log('\n' + '='.repeat(50));
    console.log('üìä R√âSUM√â DE LA MIGRATION:');
    console.log('='.repeat(50));
    console.log(`‚úÖ Collections import√©es mises √† jour: ${totalImported}`);
    console.log(`‚úÖ Sessions corrig√©es: ${totalSessionsFixed}`);
    
    // 7. Test final - v√©rifier que l'√©valuation fonctionne
    console.log('\nüß™ Test de la requ√™te d\'√©valuation...');
    
    // Requ√™te similaire √† celle du controller d'√©valuation
    const evaluationSessions = await Session.find({
      $or: [
        { teacher: teacher._id },
        { collection: { $in: originalCollections.map(c => c._id) } }
      ]
    }).distinct('student');

    console.log(`üë• √âtudiants trouv√©s pour l'√©valuation: ${evaluationSessions.length}`);

    await mongoose.connection.close();
    console.log('\n‚úÖ Migration termin√©e avec succ√®s');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la migration:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter la migration
fixEvaluationData();
