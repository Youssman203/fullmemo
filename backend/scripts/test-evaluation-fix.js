// Script de test pour v√©rifier les corrections d'√©valuation
const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

// Import des mod√®les
const User = require('../models/userModel');
const Collection = require('../models/collectionModel');
const Session = require('../models/sessionModel');

// Fonction principale de test
async function testEvaluationFix() {
  try {
    // V√©rifier que MONGO_URI est d√©fini
    if (!process.env.MONGO_URI) {
      console.error('‚ùå MONGO_URI non d√©fini. V√©rifiez le fichier .env');
      process.exit(1);
    }
    
    console.log('üì° Connexion √† MongoDB:', process.env.MONGO_URI);
    
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log('‚úÖ Connect√© √† MongoDB');

    // 1. Trouver un enseignant de test
    const teacher = await User.findOne({ role: 'teacher' });
    if (!teacher) {
      console.log('‚ùå Aucun enseignant trouv√©');
      process.exit(1);
    }
    console.log(`\nüë®‚Äçüè´ Enseignant trouv√©: ${teacher.name} (${teacher.email})`);

    // 2. Collections originales de l'enseignant
    const originalCollections = await Collection.find({ user: teacher._id });
    console.log(`üìö Collections originales de l'enseignant: ${originalCollections.length}`);
    
    // 3. Collections import√©es r√©f√©ren√ßant cet enseignant
    const importedCollections = await Collection.find({ originalTeacher: teacher._id });
    console.log(`üì• Collections import√©es r√©f√©ren√ßant l'enseignant: ${importedCollections.length}`);

    // 4. Sessions o√π l'enseignant est impliqu√©
    const sessionsAsTeacher = await Session.find({ teacher: teacher._id })
      .populate('student', 'name email')
      .populate('collection', 'name');
    
    console.log(`\nüìä Sessions o√π l'enseignant est le teacher: ${sessionsAsTeacher.length}`);
    
    if (sessionsAsTeacher.length > 0) {
      console.log('\nPremi√®res sessions:');
      sessionsAsTeacher.slice(0, 3).forEach(session => {
        console.log(`  - √âtudiant: ${session.student.name}, Collection: ${session.collection?.name || 'N/A'}`);
      });
    }

    // 5. V√©rifier s'il y a des collections import√©es sans originalTeacher
    const importedWithoutTeacher = await Collection.find({
      tags: { $in: ['import√©'] },
      originalTeacher: { $exists: false }
    });
    
    if (importedWithoutTeacher.length > 0) {
      console.log(`\n‚ö†Ô∏è  Collections import√©es sans originalTeacher: ${importedWithoutTeacher.length}`);
      console.log('Ces collections n√©cessitent une migration.');
    }

    // 6. Sessions probl√©matiques (o√π le teacher est un √©tudiant)
    const allSessions = await Session.find({})
      .populate('teacher', 'name role')
      .populate('student', 'name')
      .populate('collection', 'name');
    
    const problematicSessions = allSessions.filter(s => s.teacher && s.teacher.role === 'student');
    
    if (problematicSessions.length > 0) {
      console.log(`\n‚ùå Sessions probl√©matiques (teacher est un √©tudiant): ${problematicSessions.length}`);
      console.log('Exemples:');
      problematicSessions.slice(0, 3).forEach(session => {
        console.log(`  - Collection: ${session.collection?.name}, Teacher: ${session.teacher.name} (${session.teacher.role})`);
      });
    } else {
      console.log('\n‚úÖ Aucune session probl√©matique d√©tect√©e');
    }

    // 7. Test de la requ√™te d'√©valuation
    console.log('\n=== TEST DE LA REQU√äTE D\'√âVALUATION ===');
    
    const allCollectionIds = [
      ...originalCollections.map(c => c._id),
      ...importedCollections.map(c => c._id)
    ];
    
    const evaluationSessions = await Session.find({
      $or: [
        { collection: { $in: allCollectionIds } },
        { teacher: teacher._id }
      ]
    }).populate('student', 'name email');
    
    console.log(`‚úÖ Sessions trouv√©es pour l'√©valuation: ${evaluationSessions.length}`);
    
    // Grouper par √©tudiant
    const studentsMap = new Map();
    evaluationSessions.forEach(session => {
      const studentId = session.student._id.toString();
      if (!studentsMap.has(studentId)) {
        studentsMap.set(studentId, {
          name: session.student.name,
          sessions: 0
        });
      }
      studentsMap.get(studentId).sessions++;
    });
    
    console.log(`üë• √âtudiants uniques: ${studentsMap.size}`);
    if (studentsMap.size > 0) {
      console.log('D√©tails:');
      for (const [id, data] of studentsMap) {
        console.log(`  - ${data.name}: ${data.sessions} sessions`);
      }
    }

    await mongoose.connection.close();
    console.log('\n‚úÖ Test termin√©');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le test
testEvaluationFix();
