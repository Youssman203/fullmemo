// src/services/classService.js
import api from './api';

const classService = {
  // Cr√©er une nouvelle classe
  createClass: async (classData) => {
    try {
      console.log('Tentative de cr√©ation de classe avec les donn√©es:', classData);
      const response = await api.post('/classes', classData);
      console.log('R√©ponse de cr√©ation de classe:', response);
      return response;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de la classe:', error);
      console.error('D√©tails de l\'erreur:', {
        message: error.message,
        status: error.status,
        response: error.response
      });
      throw error;
    }
  },

  // Obtenir toutes les classes d'un enseignant
  getTeacherClasses: async () => {
    try {
      console.log('Tentative de r√©cup√©ration des classes...');
      const response = await api.get('/classes');
      console.log('R√©ponse de r√©cup√©ration des classes:', response);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des classes:', error);
      console.error('D√©tails de l\'erreur:', {
        message: error.message,
        status: error.status
      });
      throw error;
    }
  },

  // Obtenir toutes les classes d'un apprenant
  getStudentClasses: async () => {
    try {
      console.log('Tentative de r√©cup√©ration des classes de l\'apprenant...');
      const response = await api.get('/classes/student');
      console.log('R√©ponse de r√©cup√©ration des classes de l\'apprenant:', response);
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des classes de l\'apprenant:', error);
      console.error('D√©tails de l\'erreur:', {
        message: error.message,
        status: error.status
      });
      throw error;
    }
  },

  // Obtenir une classe par ID
  getClassById: async (classId) => {
    try {
      const response = await api.get(`/classes/${classId}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la classe:', error);
      throw error;
    }
  },

  // Mettre √† jour une classe
  updateClass: async (classId, classData) => {
    try {
      const response = await api.put(`/classes/${classId}`, classData);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de la classe:', error);
      throw error;
    }
  },

  // Supprimer une classe
  deleteClass: async (classId) => {
    try {
      const response = await api.delete(`/classes/${classId}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la suppression de la classe:', error);
      throw error;
    }
  },

  // Inviter des apprenants par email
  inviteStudents: async (classId, emails) => {
    try {
      const response = await api.post(`/classes/${classId}/invite`, { emails });
      return response.data;
    } catch (error) {
      console.error('Erreur lors de l\'invitation des apprenants:', error);
      throw error;
    }
  },

  // Rejoindre une classe avec un code d'invitation
  joinClassByCode: async (inviteCode) => {
    try {
      console.log('Tentative d\'adh√©sion avec le code:', inviteCode);
      const response = await api.post(`/classes/join/${inviteCode}`);
      console.log('R√©ponse d\'adh√©sion:', response);
      return response;
    } catch (error) {
      console.error('Erreur lors de l\'adh√©sion √† la classe:', error);
      console.error('D√©tails de l\'erreur:', {
        message: error.message,
        status: error.status,
        response: error.response
      });
      throw error;
    }
  },

  // Retirer un apprenant d'une classe
  removeStudent: async (classId, studentId) => {
    try {
      const response = await api.delete(`/classes/${classId}/students/${studentId}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors du retrait de l\'apprenant:', error);
      throw error;
    }
  },

  // Obtenir les statistiques d'une classe
  getClassStats: async (classId) => {
    try {
      const response = await api.get(`/classes/${classId}/stats`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des statistiques:', error);
      throw error;
    }
  },

  // Obtenir les d√©tails complets d'une classe
  getClassById: async (classId) => {
    try {
      console.log('Calling API for class ID:', classId);
      const response = await api.get(`/classes/${classId}`);
      console.log('API response for getClassById:', response);
      
      // L'API retourne directement les donn√©es, pas dans response.data
      return response;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des d√©tails de la classe:', error);
      console.error('Error details:', {
        message: error.message,
        status: error.status,
        stack: error.stack
      });
      throw error;
    }
  },

  // Partager une collection avec une classe
  shareCollectionWithClass: async (classId, collectionId) => {
    try {
      const response = await api.post(`/classes/${classId}/collections`, {
        collectionId
      });
      return response.data;
    } catch (error) {
      console.error('Erreur lors du partage de la collection:', error);
      throw error;
    }
  },

  // Retirer le partage d'une collection d'une classe
  unshareCollectionFromClass: async (classId, collectionId) => {
    try {
      const response = await api.delete(`/classes/${classId}/collections/${collectionId}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors du retrait de la collection:', error);
      throw error;
    }
  },

  // Obtenir les collections partag√©es d'une classe
  getClassCollections: async (classId) => {
    try {
      const response = await api.get(`/classes/${classId}/collections`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des collections:', error);
      throw error;
    }
  },

  // Importer une collection partag√©e dans les collections personnelles de l'apprenant
  importCollectionFromClass: async (classId, collectionId) => {
    try {
      const response = await api.post(`/classes/${classId}/collections/import`, {
        collectionId
      });
      return response.data;
    } catch (error) {
      console.error('Erreur lors de l\'importation de la collection:', error);
      throw error;
    }
  },

  // R√©cup√©rer les cartes d'une collection partag√©e (pour aper√ßu)
  getClassCollectionCards: async (classId, collectionId) => {
    try {
      console.log('üìñ R√©cup√©ration cartes collection:', { classId, collectionId });
      const response = await api.get(`/classes/${classId}/collections/${collectionId}/cards`);
      console.log('‚úÖ Cartes r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cartes:', error);
      throw error;
    }
  }
};

export default classService;
