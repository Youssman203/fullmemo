// üîç DIAGNOSTIC IMM√âDIAT - Copier-coller dans la console du navigateur

console.log('üö® DIAGNOSTIC AUTHENTIFICATION IMM√âDIAT');
console.log('=====================================');

// V√©rification rapide
const token = localStorage.getItem('token');
const user = localStorage.getItem('user');

console.log('‚úÖ Statut connexion:');
console.log('   Token pr√©sent:', !!token);
console.log('   User pr√©sent:', !!user);

if (!token || !user) {
  console.log('');
  console.log('‚ùå VOUS N\'√äTES PAS CONNECT√â !');
  console.log('');
  console.log('üîß ACTIONS IMM√âDIATES:');
  console.log('1. Aller sur la page de connexion');
  console.log('2. Utiliser ces identifiants:');
  console.log('   üìß Email: etudiant.test@example.com');
  console.log('   üîê Password: password123');
  console.log('3. Ignorer les erreurs Google OAuth');
  console.log('4. Une fois connect√©, revenir ici');
  console.log('');
  console.log('‚ö†Ô∏è Les erreurs "Utilisateur non authentifi√©" viennent de l√† !');
} else {
  console.log('');
  console.log('‚úÖ CONNECT√â ! Analysons le token...');
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const now = Math.floor(Date.now() / 1000);
    const isExpired = payload.exp < now;
    
    console.log('üë§ Utilisateur:', JSON.parse(user).name);
    console.log('‚è∞ Token expire le:', new Date(payload.exp * 1000));
    console.log('üö® Token expir√©:', isExpired);
    
    if (isExpired) {
      console.log('');
      console.log('‚ùå TOKEN EXPIR√â - RECONNEXION REQUISE');
      console.log('üîÑ Reconnectez-vous avec: etudiant.test@example.com');
    } else {
      console.log('');
      console.log('‚úÖ TOKEN VALIDE - PR√äT POUR IMPORT');
      console.log('üéØ Code de test: I44WPL');
    }
  } catch (e) {
    console.log('‚ùå Token corrompu:', e.message);
  }
}
