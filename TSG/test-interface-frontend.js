const http = require('http');

async function testInterfaceFrontend() {
  console.log('üñ•Ô∏è Test Interface Frontend - Bouton T√©l√©chargement');
  console.log('=' .repeat(60));

  const STUDENT_EMAIL = 'etudiant.test@example.com';
  const STUDENT_PASSWORD = 'password123';
  const BAC2_CLASS_ID = '68884889e4c3c95f0bcd3eed';

  function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
      const req = http.request(options, (res) => {
        let body = '';
        res.on('data', (chunk) => body += chunk);
        res.on('end', () => {
          try {
            const jsonBody = JSON.parse(body);
            resolve({ status: res.statusCode, data: jsonBody });
          } catch (e) {
            resolve({ status: res.statusCode, data: body });
          }
        });
      });
      req.on('error', reject);
      if (data) req.write(JSON.stringify(data));
      req.end();
    });
  }

  try {
    // 1. Connexion √©tudiant
    console.log('\n1. üîë Connexion √©tudiant');
    const loginResponse = await makeRequest({
      hostname: 'localhost', port: 5000, path: '/api/users/login', method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    }, { email: STUDENT_EMAIL, password: STUDENT_PASSWORD });

    if (loginResponse.status !== 200) {
      console.log('‚ùå Connexion √©chou√©e');
      return;
    }

    const token = loginResponse.data.token;
    console.log('‚úÖ Connexion r√©ussie');

    // 2. R√©cup√©rer collections partag√©es (simulation frontend)
    console.log('\n2. üìö Simulation r√©cup√©ration collections frontend');
    const collectionsResponse = await makeRequest({
      hostname: 'localhost', port: 5000,
      path: `/api/classes/${BAC2_CLASS_ID}/collections`, method: 'GET',
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (collectionsResponse.status !== 200) {
      console.log('‚ùå Erreur r√©cup√©ration collections');
      return;
    }

    const collectionsData = collectionsResponse.data.data;
    const collections = collectionsData.collections || [];
    
    console.log(`Collections r√©cup√©r√©es: ${collections.length}`);

    // 3. Simuler la logique frontend pour afficher les boutons
    console.log('\n3. üîç Simulation logique affichage boutons');
    
    collections.forEach((collection, index) => {
      console.log(`\nCollection ${index + 1}: ${collection.name}`);
      console.log(`   ID: ${collection._id}`);
      console.log(`   Cartes (cardsCount): ${collection.cardsCount || 0}`);
      console.log(`   Cartes (cardCount): ${collection.cardCount || 0}`);
      console.log(`   Description: ${collection.description || 'Aucune'}`);

      // Logique frontend: afficher bouton si collection a des cartes
      const hasCards = (collection.cardCount || collection.cardsCount || 0) > 0;
      
      console.log(`   üëÅÔ∏è Bouton t√©l√©chargement affich√©: ${hasCards ? '‚úÖ OUI' : '‚ùå NON'}`);
      
      if (hasCards) {
        console.log(`   üéØ BOUTON ACTIF - Pr√™t pour t√©l√©chargement`);
        console.log(`   üì• Action: Importer ${collection.cardCount || collection.cardsCount} cartes`);
      } else {
        console.log(`   ‚ö†Ô∏è BOUTON CACH√â - Aucune carte √† importer`);
      }
    });

    // 4. Test d'importation via API (simulation clic bouton)
    console.log('\n4. üñ±Ô∏è Simulation clic bouton t√©l√©chargement');
    
    const collectionAvecCartes = collections.find(col => 
      (col.cardCount || col.cardsCount || 0) > 0
    );

    if (collectionAvecCartes) {
      console.log(`Simulation clic sur: ${collectionAvecCartes.name}`);
      
      const importResponse = await makeRequest({
        hostname: 'localhost', port: 5000,
        path: `/api/classes/${BAC2_CLASS_ID}/collections/import`, method: 'POST',
        headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }
      }, { collectionId: collectionAvecCartes._id });

      console.log(`Statut importation: ${importResponse.status}`);
      
      if (importResponse.status === 201) {
        console.log('‚úÖ SUCC√àS - Toast de succ√®s affich√©');
        console.log(`Message: ${importResponse.data.message}`);
        console.log('üîÑ Redirection vers "Mes Collections" recommand√©e');
      } else if (importResponse.status === 400) {
        console.log('‚ö†Ô∏è D√âJ√Ä IMPORT√â - Toast d\'information affich√©');
        console.log(`Message: ${importResponse.data.message}`);
      } else {
        console.log('‚ùå ERREUR - Toast d\'erreur affich√©');
        console.log(`Message: ${importResponse.data.message || 'Erreur inconnue'}`);
      }
    } else {
      console.log('‚ùå Aucune collection avec cartes - Aucun bouton affich√©');
    }

    // 5. V√©rification √©tat apr√®s importation
    console.log('\n5. üîç √âtat apr√®s importation');
    
    const afterCollectionsResponse = await makeRequest({
      hostname: 'localhost', port: 5000,
      path: `/api/classes/${BAC2_CLASS_ID}/collections`, method: 'GET',
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (afterCollectionsResponse.status === 200) {
      const afterCollections = afterCollectionsResponse.data.data.collections || [];
      
      console.log('\n√âtat des boutons apr√®s importation:');
      afterCollections.forEach((collection, index) => {
        const hasCards = (collection.cardCount || collection.cardsCount || 0) > 0;
        
        // Simuler v√©rification si d√©j√† import√© (logique frontend)
        const wouldShowButton = hasCards; // Le frontend devrait g√©rer l'√©tat "d√©j√† import√©"
        
        console.log(`   ${index + 1}. ${collection.name}: Bouton ${wouldShowButton ? 'VISIBLE' : 'CACH√â'}`);
      });
    }

    // 6. Instructions pour test manuel
    console.log('\n\nüìù INSTRUCTIONS POUR TEST MANUEL FRONTEND:');
    console.log('‚îÄ'.repeat(50));
    console.log('1. Ouvrir http://localhost:3000');
    console.log('2. Se connecter avec: etudiant.test@example.com / password123');
    console.log('3. Naviguer: Classes ‚Üí bac2 ‚Üí Collections');
    console.log('4. V√âRIFIER: Boutons "T√©l√©charger" üì• sont visibles');
    console.log('5. CLIQUER: Sur un bouton "T√©l√©charger"');
    console.log('6. OBSERVER: Toast de succ√®s');
    console.log('7. ALLER: Mes Collections ‚Üí Collection import√©e visible');

    console.log('\nüéØ POINTS CRITIQUES √Ä V√âRIFIER:');
    console.log('‚úÖ Collections affichent le bon nombre de cartes');
    console.log('‚úÖ Boutons "T√©l√©charger" visibles pour collections avec cartes');
    console.log('‚úÖ Boutons masqu√©s pour collections vides');
    console.log('‚úÖ Toast de succ√®s apr√®s importation');
    console.log('‚úÖ Navigation vers collection import√©e fonctionne');

    console.log('\nüöÄ FRONTEND PR√äT POUR UTILISATION !');

  } catch (error) {
    console.error('‚ùå Erreur test frontend:', error);
  }
}

testInterfaceFrontend();
