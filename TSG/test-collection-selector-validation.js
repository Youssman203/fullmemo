// test-collection-selector-validation.js
// Script de validation pour le nouveau s√©lecteur de collections

console.log('üß™ VALIDATION DU S√âLECTEUR DE COLLECTIONS √âTUDIANT');
console.log('=' .repeat(60));

// 1. V√©rification des fichiers cr√©√©s
const fs = require('fs');
const path = require('path');

const filesToCheck = [
  {
    path: 'spaced-revision/src/components/CollectionSelectorModal.js',
    description: 'Composant principal du s√©lecteur'
  },
  {
    path: 'spaced-revision/src/components/StudentClassesPanel.js',
    description: 'Panel √©tudiant modifi√©'
  },
  {
    path: 'spaced-revision/src/components/CollectionPreviewModal.js',
    description: 'Modal d\'aper√ßu (existant)'
  }
];

console.log('\nüìÅ V√©rification des fichiers :');
filesToCheck.forEach(file => {
  const fullPath = path.join(__dirname, file.path);
  const exists = fs.existsSync(fullPath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file.description}`);
  if (!exists) {
    console.log(`   ‚ö†Ô∏è  Fichier manquant: ${file.path}`);
  }
});

// 2. V√©rification du contenu des fichiers modifi√©s
console.log('\nüîç V√©rification du contenu des fichiers :');

try {
  // V√©rifier StudentClassesPanel
  const panelPath = path.join(__dirname, 'spaced-revision/src/components/StudentClassesPanel.js');
  if (fs.existsSync(panelPath)) {
    const panelContent = fs.readFileSync(panelPath, 'utf8');
    
    const checksPanel = [
      { check: panelContent.includes('import CollectionSelectorModal'), desc: 'Import CollectionSelectorModal' },
      { check: panelContent.includes('showCollectionSelector'), desc: '√âtat showCollectionSelector' },
      { check: panelContent.includes('handleViewCollectionsSelector'), desc: 'Fonction handleViewCollectionsSelector' },
      { check: panelContent.includes('<CollectionSelectorModal'), desc: 'Utilisation du composant' }
    ];
    
    console.log('\nüìÑ StudentClassesPanel.js :');
    checksPanel.forEach(item => {
      console.log(`${item.check ? '‚úÖ' : '‚ùå'} ${item.desc}`);
    });
  }
  
  // V√©rifier CollectionSelectorModal
  const modalPath = path.join(__dirname, 'spaced-revision/src/components/CollectionSelectorModal.js');
  if (fs.existsSync(modalPath)) {
    const modalContent = fs.readFileSync(modalPath, 'utf8');
    
    const checksModal = [
      { check: modalContent.includes('useState'), desc: 'Hooks React' },
      { check: modalContent.includes('getClassCollections'), desc: 'Service API collections' },
      { check: modalContent.includes('importCollectionFromClass'), desc: 'Service API import' },
      { check: modalContent.includes('Form.Check'), desc: 'Checkboxes pour s√©lection' },
      { check: modalContent.includes('handleSelectAll'), desc: 'Fonction s√©lection multiple' },
      { check: modalContent.includes('handleImportSelected'), desc: 'Fonction import en lot' },
      { check: modalContent.includes('CollectionPreviewModal'), desc: 'Modal d\'aper√ßu int√©gr√©e' }
    ];
    
    console.log('\nüìÑ CollectionSelectorModal.js :');
    checksModal.forEach(item => {
      console.log(`${item.check ? '‚úÖ' : '‚ùå'} ${item.desc}`);
    });
    
    // Compter les lignes de code
    const lines = modalContent.split('\n').length;
    console.log(`üìä Lignes de code: ${lines}`);
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification du contenu:', error.message);
}

// 3. V√©rification des d√©pendances
console.log('\nüì¶ V√©rification des d√©pendances :');

const packageJsonPath = path.join(__dirname, 'spaced-revision/package.json');
if (fs.existsSync(packageJsonPath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
    
    const requiredDeps = [
      'react',
      'react-bootstrap', 
      'react-icons',
      'react-router-dom'
    ];
    
    requiredDeps.forEach(dep => {
      const exists = dependencies[dep];
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dep}${exists ? ` (${exists})` : ' - MANQUANT'}`);
    });
  } catch (error) {
    console.log('‚ùå Erreur lors de la lecture du package.json');
  }
} else {
  console.log('‚ùå package.json non trouv√©');
}

// 4. Instructions de test
console.log('\nüß™ INSTRUCTIONS DE TEST :');
console.log('1. D√©marrer le backend: cd backend && node server.js');
console.log('2. D√©marrer le frontend: cd spaced-revision && npm start');
console.log('3. Connexion enseignant: prof.martin@example.com / password123');
console.log('4. Partager quelques collections avec la classe "bac2"');
console.log('5. Connexion √©tudiant: etudiant.test@example.com / password123');
console.log('6. Dashboard ‚Üí Mes Classes ‚Üí Bouton "Collections"');
console.log('7. Tester la nouvelle interface de s√©lection multiple');

console.log('\nüìã Utiliser le guide complet: GUIDE_TEST_COLLECTION_SELECTOR.md');

// 5. Fonctionnalit√©s cl√©s √† valider
console.log('\nüéØ FONCTIONNALIT√âS CL√âS IMPL√âMENT√âES :');
console.log('‚úÖ Interface de s√©lection multiple avec checkboxes');
console.log('‚úÖ Bouton "Tout s√©lectionner/d√©s√©lectionner"');
console.log('‚úÖ Import en lot des collections s√©lectionn√©es');
console.log('‚úÖ Import individuel avec aper√ßu');
console.log('‚úÖ Feedback visuel (spinners, toasts, badges)');
console.log('‚úÖ Gestion des r√©sultats d\'import d√©taill√©s');
console.log('‚úÖ Interface responsive et moderne');
console.log('‚úÖ Int√©gration avec modal d\'aper√ßu existante');

console.log('\nüöÄ Le s√©lecteur de collections est pr√™t pour les tests !');
console.log('=' .repeat(60));
