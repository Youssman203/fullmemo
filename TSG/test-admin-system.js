const mongoose = require('mongoose');
const colors = require('colors');
const dotenv = require('dotenv');

// Charger les variables d'environnement
dotenv.config({ path: './backend/.env' });

const User = require('./backend/models/userModel');

// Connexion √† MongoDB
const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI);
    console.log(`MongoDB connect√©: ${conn.connection.host}`.cyan.underline);
  } catch (error) {
    console.error('Erreur connexion MongoDB:', error);
    process.exit(1);
  }
};

const testAdminSystem = async () => {
  console.log('üß™ Test du Syst√®me d\'Administration\n'.bold.yellow);
  
  try {
    await connectDB();
    
    // 1. V√©rifier l'existence de l'admin
    console.log('1. V√©rification du compte administrateur...'.blue);
    const admin = await User.findOne({ role: 'admin' });
    
    if (!admin) {
      console.log('‚ùå Aucun administrateur trouv√©'.red);
      console.log('üí° Ex√©cutez: node backend/scripts/createAdminUser.js'.yellow);
      process.exit(1);
    }
    
    console.log('‚úÖ Administrateur trouv√©:'.green);
    console.log(`   Email: ${admin.email}`);
    console.log(`   Nom: ${admin.name}`);
    console.log(`   ID: ${admin._id}`);
    
    // 2. Statistiques du syst√®me
    console.log('\n2. Statistiques syst√®me...'.blue);
    
    const totalUsers = await User.countDocuments();
    const totalStudents = await User.countDocuments({ role: 'student' });
    const totalTeachers = await User.countDocuments({ role: 'teacher' });
    const totalAdmins = await User.countDocuments({ role: 'admin' });
    
    console.log('‚úÖ Utilisateurs:'.green);
    console.log(`   Total: ${totalUsers}`);
    console.log(`   √âtudiants: ${totalStudents}`);
    console.log(`   Enseignants: ${totalTeachers}`);
    console.log(`   Administrateurs: ${totalAdmins}`);
    
    // 3. Test de validation du mod√®le
    console.log('\n3. Test du mod√®le utilisateur...'.blue);
    
    const testUser = new User({
      name: 'Test User',
      email: 'test@example.com',
      password: 'test123',
      role: 'student'
    });
    
    const validationError = testUser.validateSync();
    if (validationError) {
      console.log('‚ùå Erreur de validation du mod√®le:', validationError.message.red);
    } else {
      console.log('‚úÖ Mod√®le utilisateur valide'.green);
    }
    
    // 4. V√©rifier les r√¥les support√©s
    console.log('\n4. V√©rification des r√¥les...'.blue);
    
    const userSchema = User.schema.paths.role;
    const supportedRoles = userSchema.enumValues;
    
    console.log('‚úÖ R√¥les support√©s:'.green);
    supportedRoles.forEach(role => {
      const count = role === 'student' ? totalStudents : 
                   role === 'teacher' ? totalTeachers : 
                   role === 'admin' ? totalAdmins : 0;
      console.log(`   ${role}: ${count} utilisateur(s)`);
    });
    
    // 5. Test de connexion admin (simulation)
    console.log('\n5. Test d\'authentification admin...'.blue);
    
    const isPasswordValid = await admin.matchPassword('admin123');
    if (isPasswordValid) {
      console.log('‚úÖ Mot de passe admin correct'.green);
    } else {
      console.log('‚ùå Mot de passe admin incorrect'.red);
    }
    
    // 6. G√©n√©ration token JWT
    console.log('\n6. Test g√©n√©ration token JWT...'.blue);
    
    try {
      const token = admin.getSignedJwtToken();
      if (token && token.split('.').length === 3) {
        console.log('‚úÖ Token JWT g√©n√©r√© avec succ√®s'.green);
        console.log(`   Token (tronqu√©): ${token.substring(0, 30)}...`);
      } else {
        console.log('‚ùå Erreur g√©n√©ration token JWT'.red);
      }
    } catch (error) {
      console.log('‚ùå Erreur g√©n√©ration token:', error.message.red);
    }
    
    console.log('\nüéâ Tests du syst√®me d\'administration termin√©s !'.bold.green);
    console.log('\nüìã Prochaines √©tapes:'.bold.blue);
    console.log('1. D√©marrer le serveur backend: cd backend && npm start');
    console.log('2. D√©marrer le serveur frontend: cd spaced-revision && npm start');
    console.log('3. Se connecter avec: admin@spaced-revision.com / admin123');
    console.log('4. Aller sur: http://localhost:3000/admin');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:'.red, error.message);
  } finally {
    mongoose.disconnect();
  }
};

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testAdminSystem();
}

module.exports = testAdminSystem;
