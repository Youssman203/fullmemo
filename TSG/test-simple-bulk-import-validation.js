const fs = require('fs');
const path = require('path');

console.log('üîç VALIDATION IMPORT SIMPLE CSV - V√©rification des fichiers\n');

// Chemins des fichiers √† v√©rifier
const filesToCheck = [
  // Backend
  {
    path: './backend/controllers/simpleBulkImportController.js',
    type: 'Backend Controller',
    description: 'Contr√¥leur pour import simple CSV (Questions/R√©ponses seulement)'
  },
  {
    path: './backend/routes/simpleBulkImportRoutes.js',
    type: 'Backend Routes',
    description: 'Routes API pour import simple CSV'
  },
  
  // Frontend
  {
    path: './spaced-revision/src/components/SimpleBulkImportModal.js',
    type: 'Frontend Component',
    description: 'Modal React pour import simple CSV'
  },
  
  // Test et documentation
  {
    path: './test-cartes-simple-exemple.csv',
    type: 'Test File',
    description: 'Fichier CSV d\'exemple avec 15 cartes'
  },
  {
    path: './GUIDE_TEST_IMPORT_SIMPLE_CSV.md',
    type: 'Documentation',
    description: 'Guide de test complet pour validation'
  }
];

let allFilesFound = true;
let successCount = 0;

console.log('üìÅ V√âRIFICATION DES FICHIERS:\n');

filesToCheck.forEach(file => {
  const fullPath = path.resolve(file.path);
  const exists = fs.existsSync(fullPath);
  
  if (exists) {
    const stats = fs.statSync(fullPath);
    const sizeKB = Math.round(stats.size / 1024);
    console.log(`‚úÖ ${file.type}: ${file.path}`);
    console.log(`   üìù ${file.description}`);
    console.log(`   üìä Taille: ${sizeKB} KB`);
    console.log(`   üìÖ Modifi√©: ${stats.mtime.toLocaleDateString('fr-FR')} ${stats.mtime.toLocaleTimeString('fr-FR')}\n`);
    successCount++;
  } else {
    console.log(`‚ùå ${file.type}: ${file.path}`);
    console.log(`   üö® FICHIER MANQUANT: ${file.description}\n`);
    allFilesFound = false;
  }
});

// V√©rification de l'int√©gration dans server.js
console.log('üîó V√âRIFICATION DES INT√âGRATIONS:\n');

try {
  const serverPath = './backend/server.js';
  if (fs.existsSync(serverPath)) {
    const serverContent = fs.readFileSync(serverPath, 'utf8');
    
    // V√©rifier l'import des routes
    const hasImport = serverContent.includes('simpleBulkImportRoutes') || 
                     serverContent.includes('./routes/simpleBulkImportRoutes');
    
    // V√©rifier l'utilisation des routes
    const hasUsage = serverContent.includes('/api/simple-bulk-import') || 
                    serverContent.includes('simpleBulkImportRoutes');
    
    if (hasImport && hasUsage) {
      console.log('‚úÖ server.js: Routes simple-bulk-import int√©gr√©es');
    } else {
      console.log('‚ö†Ô∏è server.js: Routes simple-bulk-import NON int√©gr√©es');
      console.log('   üìù Ajouter: const simpleBulkImportRoutes = require(\'./routes/simpleBulkImportRoutes\');');
      console.log('   üìù Ajouter: app.use(\'/api/simple-bulk-import\', simpleBulkImportRoutes);');
      allFilesFound = false;
    }
  } else {
    console.log('‚ùå server.js: Fichier non trouv√©');
    allFilesFound = false;
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de server.js:', error.message);
  allFilesFound = false;
}

// V√©rification de l'int√©gration dans Collections.js
try {
  const collectionsPath = './spaced-revision/src/pages/Collections.js';
  if (fs.existsSync(collectionsPath)) {
    const collectionsContent = fs.readFileSync(collectionsPath, 'utf8');
    
    const hasImport = collectionsContent.includes('SimpleBulkImportModal');
    const hasState = collectionsContent.includes('showSimpleBulkImportModal');
    const hasButton = collectionsContent.includes('Import Simple CSV') || 
                     collectionsContent.includes('FaFileImport');
    const hasModal = collectionsContent.includes('<SimpleBulkImportModal');
    
    if (hasImport && hasState && hasButton && hasModal) {
      console.log('‚úÖ Collections.js: SimpleBulkImportModal int√©gr√©');
    } else {
      console.log('‚ö†Ô∏è Collections.js: SimpleBulkImportModal NON int√©gr√© compl√®tement');
      console.log(`   üìù Import: ${hasImport ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üìù State: ${hasState ? '‚úÖ' : '‚ùå'}`);  
      console.log(`   üìù Button: ${hasButton ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üìù Modal: ${hasModal ? '‚úÖ' : '‚ùå'}`);
      allFilesFound = false;
    }
  } else {
    console.log('‚ùå Collections.js: Fichier non trouv√©');
    allFilesFound = false;
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de Collections.js:', error.message);
  allFilesFound = false;
}

console.log('\nüìä R√âSUM√â DE LA VALIDATION:\n');

if (allFilesFound) {
  console.log('üéâ VALIDATION R√âUSSIE !');
  console.log(`‚úÖ ${successCount}/${filesToCheck.length} fichiers trouv√©s`);
  console.log('‚úÖ Int√©grations backend et frontend valid√©es');
  console.log('\nüöÄ PROCHAINES √âTAPES:');
  console.log('1. Installer les d√©pendances backend si n√©cessaire:');
  console.log('   cd backend && npm install csv-parser xlsx multer');
  console.log('2. Red√©marrer le serveur backend (port 5000)');
  console.log('3. Red√©marrer le frontend React (port 3000)');
  console.log('4. Suivre le guide: GUIDE_TEST_IMPORT_SIMPLE_CSV.md');
  console.log('5. Se connecter avec prof.martin@example.com');
  console.log('6. Tester l\'import avec test-cartes-simple-exemple.csv');
} else {
  console.log('‚ùå VALIDATION √âCHOU√âE !');
  console.log(`‚ö†Ô∏è ${successCount}/${filesToCheck.length} fichiers trouv√©s`);
  console.log('üîß V√©rifier les fichiers manquants ci-dessus');
  console.log('üîß Compl√©ter les int√©grations manquantes');
}

console.log('\nüí° AIDE ET SUPPORT:');
console.log('üìñ Guide complet: GUIDE_TEST_IMPORT_SIMPLE_CSV.md');
console.log('üß™ Fichier test: test-cartes-simple-exemple.csv (15 cartes)');
console.log('üîç Validation: Relancer ce script apr√®s corrections');

// Afficher le contenu du CSV d'exemple si disponible
try {
  const csvPath = './test-cartes-simple-exemple.csv';
  if (fs.existsSync(csvPath)) {
    const csvContent = fs.readFileSync(csvPath, 'utf8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    console.log(`\nüìÑ APER√áU DU FICHIER TEST (${lines.length} lignes):`);
    console.log('‚îÄ'.repeat(50));
    lines.slice(0, 6).forEach((line, index) => {
      if (index === 0) {
        console.log(`üìã ${line} (Header)`);
      } else {
        console.log(`${index}. ${line}`);
      }
    });
    if (lines.length > 6) {
      console.log(`... et ${lines.length - 6} autres cartes`);
    }
  }
} catch (error) {
  console.log('‚ö†Ô∏è Impossible d\'afficher l\'aper√ßu du CSV:', error.message);
}

console.log('\n' + '='.repeat(70));
console.log('üéØ FONCTIONNALIT√â IMPORT SIMPLE CSV - VALIDATION TERMIN√âE');
console.log('='.repeat(70));
